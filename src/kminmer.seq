
from bio import *
L = Kmer[12]

class KMinmer:
    min: List[int]
    rev: bool
    shift: Tuple[int, int]
    seq: str
    l: int
    k: int

    def __init__(self, minims: List[int], k: int, l: int):
        self.min = minims
        self.k = k
        self.l = l
    
    def suffix(self):
        return self.min[1:]
    
    def prefix(self):
        return self.min[:-1]
    
    def reverse(self):
        rev = KMinmer(List(reversed(self.min)), self.k, self.l)
        return rev
    
    def normalize(self):
        rev = self.reverse()
        if hash(self.min) < hash(rev.min): 
            self.rev = False
        else: 
            self.min = rev.min
            self.rev = True


    def fill(self, i: int, minimizers_pos: List[int], seq: str):
        k = self.k
        l = self.l
        match self.rev:
            case True: 
                self.shift = (minimizers_pos[i+k-1] - minimizers_pos[i+k-2], minimizers_pos[i+1] - minimizers_pos[i])
            case False:
                self.shift = (minimizers_pos[i+1] - minimizers_pos[i], minimizers_pos[i+k-1] - minimizers_pos[i+k-2])
        self.seq = seq[minimizers_pos[i]:(minimizers_pos[i+k-1] + l)]

    def __str__(self):
        return self.min.__str__()

    def __eq__(self, other: KMinmer):
        return self.min == other.min

    def __ne__(self, other: KMinmer):
        return self.min != other.min

    def __call__(self):
        return iter(self.min)

    def __hash__(self):
        return hash(self.min)
    