
from bio import *
L = Kmer[12]

class KMinmer:
    min: List[L]
    rev: bool
    shift: Tuple[int, int]
    seq: str
    l: int
    k: int

    def __init__(self, minims: List[L], k: int, l: int):
        self.min = minims
        self.k = k
        self.l = l
    
    def suffix(self):
        return self.min[1:]
    
    def prefix(self):
        return self.min[:-1]
    
    def reverse(self):
        return KMinmer(self.min.reverse())
    
    def normalize(self):
        rev = self.reverse()
        if self.min < rev.min: 
            self.rev = False
        else: 
            self.min = rev.min
            self.rev = True


    def fill(self, i: int, minimizers_pos: List[int], seq: str):
        k = self.k
        l = self.l
        match self.rev:
            case True: 
                self.shift = (minimizers_pos[i+k-1] - minimizers_pos[i+k-2], minimizers_pos[i+1] - minimizers_pos[i])
            case False:
                self.shift = (minimizers_pos[i+1] - minimizers_pos[i], minimizers_pos[i+k-1] - self.minimizers_pos[i+k-2])
        self.seq = seq[minimizers_pos[i]:(minimizers_pos[i+k-1] + l)];

    def __str__(self):
        print(self.min)  

    def __eq__(self, other: KMinmer):
        if self.min == other.min: return True
        else: return False
    